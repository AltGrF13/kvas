#!/bin/sh

. /opt/apps/kvas/bin/libs/main

# ------------------------------------------------------------------------------------------
#
# 	 Записываем данные маршрута по умолчанию в файл конфигурации
#
## ------------------------------------------------------------------------------------------
#ip4_write_route_default_to_config(){
#	route_default=$(ip route list main)
#	gateway=$(echo "${route_default}" | cut -d' ' -f3)
#	interface=$(echo "${route_default}" | cut -d' ' -f5)
#	address=$(get_external_ip)
#	mask=$(route | grep "^$(echo "${address}" | cut -d'.' -f1-3)" | grep UG | tr -s ' ' | cut -d' ' -f3)
#	set_config_value GW_DEFAULT "${gateway}"
#	set_config_value ETH_DEFAULT "${interface}"
#	set_config_value MASK_DEFAULT "${mask}"
#	set_config_value EXTERNAL_IP "${address}"
#}

# ------------------------------------------------------------------------------------------
#
# 	Устанавливаем маршрут по умолчанию из переданных аргументов
#
# ------------------------------------------------------------------------------------------
ip4_up_net_default(){

	interface=${1}; address=${2}; mask=${3}; gateway=${4};

	if [ -z "${gateway}" ] || [ -z "${interface}" ] ||[ -z "${address}" ] || [ -z "${mask}" ]; then
		log_error "ip4_up_net_default::Отсутствуют аргументы для запуска."
		exit 1
	else
		{
			ifconfig ${interface} down
			ifconfig ${interface} ${address} netmask ${mask} up
			route add default gw ${gateway} ${interface}

		} 2> "${ERROR_LOG_FILE}"
		when_error "${?}" "ip4_up_net_default::Ошибка при установке подключения к интернету: ip=${address}, mask=${mask}, gw=${gateway}, interface=${interface}"
	fi
}

# ------------------------------------------------------------------------------------------
#
# 	Устанавливаем маршрут по умолчанию из данных файла конфигурации
#
# ------------------------------------------------------------------------------------------
#ip4_up_net_default_from_config(){
#
#	gateway=$(get_config_value GW_DEFAULT)
#	mask=$(get_config_value MASK_DEFAULT)
#	interface=$(get_config_value ETH_DEFAULT)
#	address=$(get_config_value EXTERNAL_IP)
#
#	ip4_up_net_default "${interface}" "${address}" "${mask}" "${gateway}"
#
#}

# ------------------------------------------------------------------------------------------
#
# 	Проверяем маршрут по умолчанию и если он отсутствует устанавливаем его
#
# ------------------------------------------------------------------------------------------
#ip4_route_get_route_default(){
#	ip route list | grep -q default || {
#		ip4_up_net_default
#	}
#}

cmd_route_refresh() {
	echo -n 'Очистка цепочек iptables...'
	ip4__flush 'chain'
	echo 'сделана.'

	echo -n 'Создание недостающих правил iptables...'
	ip4__dns__add_routing_for_home
	ip4_firewall_set_all_rules
	echo 'сделано.'
}

text_empty() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не передан обязательный параметр — строка настроек"
		return
	fi

	echo "Отсутствуют. Можете указать строчку в ${KVAS_CONF_FILE}"
	echo "${1}"
	echo 'и вызвать после этого kvas route refresh'
}

text_from_ips() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не передан обязательный параметр — строка"
		return
	fi
	echo "${1/+/'\n'}"
}

cmd_route() {
	local output

	output=$(get_config_value 'route_full_ip')
	if [ -z "${output}" ] ; then
		output=$(text_empty 'route_full_ip=192.168.1.50+192.168.2.51')
	else
		output=$(text_from_ips "${output}")
	fi
	echo_debug 'IP, весь трафик которых идёт в тоннель' "${output}"
}
