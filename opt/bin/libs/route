#!/bin/sh

. /opt/apps/kvas/bin/libs/main

# замена Singleton, чтобы скан был лишь при первом вызове
IPS_KNOWN=''
nets__set_known_ips() {
	if [ -n "${IPS_KNOWN}" ]; then
		return
	fi

	IPS_KNOWN=$(curl -s 127.0.0.1:79/rci/show/ip/dhcp/bindings | jq -r '.lease[] | "\(.ip) \"\(.name)\""' | sort)

	log_warning 'Сбор зарегистрированных IP завершён'
	# чтобы не сканировало повторно, если ничего не найдено
	if [ -z "${IPS_KNOWN}" ]; then
		IPS_KNOWN=$'\n'
	fi
}

# Требует передачи "${NETS_TUNNEL}${NETS_COMMON}"
# с предварительным возможным заполнением через
# nets__set_common
# Сам не использует глобальные переменные, т.к. в отдельном контексте
nets__filter_for_tunnel() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — список"
		return
	fi
	local nets="${1}"

	local net_internet
	# шлюз в интернет бессмысленно использовать как защищённый тоннель
	net_internet=$(get_external_interface)

	# исключаем ещё сегменты, это "входящие" сети
	echo "${nets}" \
	  | grep -v "^${net_internet}" \
	  | grep -v "^br"
}

# Требует передачи "${NETS_INCOMING}${NETS_COMMON}"
# с предварительным их возможным заполнением через
# nets__set_incoming
# nets__set_common
# Сам не использует глобальные переменные, т.к. в отдельном контексте
nets__filter_for_incoming() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не задан обязательный аргумент — список"
		return
	fi
	local nets="${1}"

	local net_internet net_tunnel
	# шлюз в интернет нельзя квасить
	net_internet=$(get_external_interface)
	# защищённый тоннель нельзя квасить
	net_tunnel=$(get_config_value 'INFACE_ENT')

	echo "${nets}" \
	  | grep -v "^${net_internet}" \
	  | grep -v "^${net_tunnel}"
}

# ------------------------------------------------------------------------------------------
#
# 	 Записываем данные маршрута по умолчанию в файл конфигурации
#
## ------------------------------------------------------------------------------------------
#ip4_write_route_default_to_config(){
#	route_default=$(ip route list main)
#	gateway=$(echo "${route_default}" | cut -d' ' -f3)
#	interface=$(echo "${route_default}" | cut -d' ' -f5)
#	address=$(get_external_ip)
#	mask=$(route | grep "^$(echo "${address}" | cut -d'.' -f1-3)" | grep UG | tr -s ' ' | cut -d' ' -f3)
#	set_config_value GW_DEFAULT "${gateway}"
#	set_config_value ETH_DEFAULT "${interface}"
#	set_config_value MASK_DEFAULT "${mask}"
#	set_config_value EXTERNAL_IP "${address}"
#}

# ------------------------------------------------------------------------------------------
#
# 	Устанавливаем маршрут по умолчанию из переданных аргументов
#
# ------------------------------------------------------------------------------------------
ip4_up_net_default(){

	interface=${1}; address=${2}; mask=${3}; gateway=${4};

	if [ -z "${gateway}" ] || [ -z "${interface}" ] ||[ -z "${address}" ] || [ -z "${mask}" ]; then
		log_error "ip4_up_net_default::Отсутствуют аргументы для запуска."
		exit 1
	else
		{
			ifconfig ${interface} down
			ifconfig ${interface} ${address} netmask ${mask} up
			route add default gw ${gateway} ${interface}

		} 2> "${ERROR_LOG_FILE}"
		when_error "${?}" "ip4_up_net_default::Ошибка при установке подключения к интернету: ip=${address}, mask=${mask}, gw=${gateway}, interface=${interface}"
	fi
}

# ------------------------------------------------------------------------------------------
#
# 	Устанавливаем маршрут по умолчанию из данных файла конфигурации
#
# ------------------------------------------------------------------------------------------
#ip4_up_net_default_from_config(){
#
#	gateway=$(get_config_value GW_DEFAULT)
#	mask=$(get_config_value MASK_DEFAULT)
#	interface=$(get_config_value ETH_DEFAULT)
#	address=$(get_config_value EXTERNAL_IP)
#
#	ip4_up_net_default "${interface}" "${address}" "${mask}" "${gateway}"
#
#}

# ------------------------------------------------------------------------------------------
#
# 	Проверяем маршрут по умолчанию и если он отсутствует устанавливаем его
#
# ------------------------------------------------------------------------------------------
#ip4_route_get_route_default(){
#	ip route list | grep -q default || {
#		ip4_up_net_default
#	}
#}

cmd_tunnel() {
	local output cache internet_net_name
	nets__set_common
	local nets_dictionary="${NETS_TUNNEL}${NETS_COMMON}"


	echo 'Интернет шлюз:'
	print_line

	cache=$(curl -s '127.0.0.1:79/rci/show/internet/status')
	internet_net_name=$(get_external_interface)

	output=$( nets__get "${nets_dictionary}" "${internet_net_name}" 'title' | xargs )
	ready 'Название' && when_ok "${output}"

	output=$(echo "${cache}" | jq -r '.gateway.interface // empty')
	if [ -z "${output}" ]; then
		output='Не найден!'
	fi
	ready 'Keenetic-имя' && when_ok "${output}"

	output="${internet_net_name}"
	if [ -z "${output}" ]; then
		output='Не найден!'
	fi
	ready 'Сетевой интерфейс' && when_ok "${output}"

	output=$(echo "${cache}" | jq -r '.internet // empty')
	if [ "${output}" == 'true' ]; then
		output='есть'
	else
		output='нет'
	fi
	ready 'Подключение' && when_ok "${output}"

	if [ "${output}" == 'есть' ]; then
		output=$(get_external_ip)
		if [ -z "${output}" ]; then
			output='Не найден!'
		fi
		ready 'IP' && when_ok "${output}"
	fi


	echo
	print_line
	echo 'Тоннель:'
	print_line

	local tunnel_net_name tunnel_keenetic_name
	tunnel_net_name=$(     get_config_value 'INFACE_ENT')
	tunnel_keenetic_name=$(get_config_value 'INFACE_CLI')
	if [ -z "${tunnel_net_name}" ]; then
		echo 'Не найдено имя сетевого интерфейса.'
		echo 'Настройте тоннель заново kvas tunnel set'
	elif [ -z "${tunnel_keenetic_name}" ]; then
		echo 'Не найдено Keenetic-имя.'
		echo 'Настройте тоннель заново kvas tunnel set'
	else
		output=$( nets__get "${nets_dictionary}" "${tunnel_net_name}" 'title' | xargs )
		ready 'Название' && when_ok "${output}"

		if [ "${tunnel_keenetic_name}" != 'shadowsocks' ] ; then
			ready 'Keenetic-имя'      && when_ok "${tunnel_keenetic_name}"
			ready 'Сетевой интерфейс' && when_ok "${tunnel_net_name}"
		fi

		if is_interface_online "${tunnel_keenetic_name}"; then
			output='есть'
		else
			output='нет'
		fi
		ready 'Подключение' && when_ok "${output}"

		if [ "${output}" == 'есть' ]; then
			cache="$(get_tunnel_ip | xargs)"
			if [ -z "${cache}" ]; then
				cache='Не найден!'
			fi
			ready 'IP' && when_ok "${cache}"

			output="$(get_tunnel_addresses | xargs)"
			if [ -z "${output}" ]; then
				output='Не найден!'
			fi
			if [ "${output}" != "${cache}" ] ; then
				ready 'Домен' && when_ok "${output}"
			fi
		fi

		if is_shadowsocks_enabled; then
			echo
			print_line
			echo "Конфигурация ${SHADOWSOCKS_CONF}:"
			print_line
			grep -E '(port|method|server)' "${SHADOWSOCKS_CONF}"
			echo 'password проверьте самостоятельно!'
		fi
	fi
	echo


	output=$(nets__filter_for_tunnel "${nets_dictionary}")
	if [ -z "${output}" ] ; then
		output='Произошла ошибка сбора списка, сообщите об этом https://t.me/kvas_pro'
	else
		output=$(echo "${output}" | tr '|' ' ' | xargs -n4 printf '%-10s | %-15s | %-30s | %s\n')
	fi
	echo_debug 'Доступные для тоннеля сети:' "${output}"


	# Удаляем интерфейсы без человеческого имени
	sed -i '/|$/d;/|""$/d' "${INFACE_NAMES_FILE}"

	echo_debug 'Полученные сканированием сети:' "$(cat < ${INFACE_NAMES_FILE})"
}

cmd_route_refresh() {
	echo -n 'Очистка цепочек iptables...'
	ip4__flush 'chain'
	echo 'сделана.'

	echo -n 'Создание недостающих правил iptables...'
	ip4__dns__add_routing_for_home
	ip4_firewall_set_all_rules
	echo 'сделано.'
}

route__show_block() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не передан обязательный параметр — заголовок"
		return
	fi
	local title="${1}"

	local content="${2}"
	local empty_example="${3}"

	if [ -n "${content}" ] ; then
		content="${content:1}"
	else
		if [ -z "${empty_example}" ] ; then
			# значит мы в кратком режиме, блок не выводим
			return
		fi

		#ToDo: сделать команды
		content=$(printf '%s\n' \
			"Отсутствуют. Можете указать строчку в ${KVAS_CONF_FILE}" \
			"${empty_example}" \
			'и вызвать после этого kvas route refresh' \
		)
	fi

	echo_debug "${title}" "${content}"
}

route__show_block_ip() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не передан обязательный параметр — ключ кофигурации"
		return
	fi
	local ips_or_ranges
	ips_or_ranges=$(get_config_value "${1}")
	ips_or_ranges=${ips_or_ranges//+/ }

	if [ -n "${2}" ] ; then
		local title="${2}"
	else
		local title='IP:'
	fi

	local empty_example="${3}"

	nets__set_known_ips
	local ip_or_range find
	local content=''
	IFS=' '
	for ip_or_range in ${ips_or_ranges} ; do
		find=$( echo "${IPS_KNOWN}" | grep -F -- "${ip_or_range} " )
		if [ -z "${find}" ] ; then
			find="${ip_or_range}"
		fi

		content="${content}"$'\n'"${find}"
	done

	route__show_block "${title}" "${content}" "${empty_example}"
}

route__show_block_net() {
	#ToDo: сделать единое хранение в конфиге
	local net_interfaces="${1}"
	if [ -n "${2}" ] ; then
		local title="${2}"
	else
		local title='Сети:'
	fi
	local empty_example="${3}"

	nets__set_incoming
	nets__set_common
	local nets_dictionary="${NETS_INCOMING}${NETS_COMMON}"

	local net_interface find
	local content=''
	IFS=' '
	for net_interface in ${net_interfaces} ; do
		find=$( nets__get "${nets_dictionary}" "${net_interface}" 'ip title' )
		if [ -z "${find}" ] ; then
			find="${net_interface}"
		else
			find=$( echo "${find}" | tr '|' ' ' | xargs -n2 printf '%-15s | %s\n' )
		fi

		content="${content}"$'\n'"${find}"
	done

	route__show_block "${title}" "${content}" "${empty_example}"
}

cmd_route() {
	# если вызывается как один из дебагов, то можно передать silent/short
	if [ -z "${1}" ] ; then
		echo 'Вывод критериев попадания в тоннель:'
		echo 'какие сети и устройства, есть ли проверка вхождения в списки.'
		echo
	fi

	local empty_example=''

	if [ -z "${1}" ] ; then
		empty_example='route_full_ip=192.168.1.51+192.168.2.51'
	fi
	route__show_block_ip 'route_full_ip' \
	  'IP, весь трафик которых идёт в тоннель:' \
	  "${empty_example}"

	if [ -z "${1}" ] ; then
		empty_example='route_by_list_ip=192.168.2.52+192.168.2.53'
	fi
	route__show_block_ip 'route_by_list_ip' \
	  'IP с перехватом DNS, трафик которых идёт в тоннель согласно списку:' \
	  "${empty_example}"

	if [ -z "${1}" ] ; then
		empty_example='route_by_list_net=br0'
	fi
	route__show_block_net "br0 $(get_guest_inface_list_from_config)" \
	  'Сети с перехватом DNS, трафик которых идёт в тоннель согласно списку:' \
	  "${empty_example}"

	if [ -z "${1}" ] ; then
		empty_example='route_excluded_ip=192.168.1.52+192.168.1.53'
	fi
	route__show_block_ip 'route_excluded_ip' \
	  'IP, исключённые из перехвата DNS и трафика:' \
	  "${empty_example}"

	local output

	nets__set_incoming
	nets__set_common
	output=$(nets__filter_for_incoming "${NETS_INCOMING}${NETS_COMMON}")
	if [ -z "${output}" ] ; then
		output='Произошла ошибка сбора списка, сообщите об этом https://t.me/kvas_pro'
	else
		output=$(echo "${output}" | tr '|' ' ' | xargs -n4 printf '%-10s | %-15s | %-30s | %s\n')
	fi
	echo_debug 'Доступные для маршрутизации сети:' "${output}"

	# если вызывается как один из дебагов, то можно передать silent/short
	if [ -z "${1}" ] ; then
		nets__set_known_ips
		if [ -z "${IPS_KNOWN}" ] ; then
			output=$(printf '%s\n' \
				'Отсутствуют. В админке роутера закрепите постоянный IP-адрес за любым устройством,' \
				'чтобы использовать его здесь.' \
			)
		else
			output=$(echo "${IPS_KNOWN}" | xargs -n2 printf '%-15s | %s\n')
		fi
		echo_debug 'Зарегистрированные клиенты c постоянным IP-адресом:' "${output}"
	fi
}
