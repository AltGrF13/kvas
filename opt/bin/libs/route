#!/bin/sh

. /opt/apps/kvas/bin/libs/main

IPS_KNOWN=''
get_ips_known() {
	# функциональная замена Singleton
	if [ -z "${IPS_KNOWN}" ] ; then
		IPS_KNOWN=$(curl -s 127.0.0.1:79/rci/show/ip/dhcp/bindings | jq -r '.lease[] | "\(.ip) \(.name)"' | sort)
	fi
	echo "${IPS_KNOWN}"
}

# ------------------------------------------------------------------------------------------
#
# 	 Записываем данные маршрута по умолчанию в файл конфигурации
#
## ------------------------------------------------------------------------------------------
#ip4_write_route_default_to_config(){
#	route_default=$(ip route list main)
#	gateway=$(echo "${route_default}" | cut -d' ' -f3)
#	interface=$(echo "${route_default}" | cut -d' ' -f5)
#	address=$(get_external_ip)
#	mask=$(route | grep "^$(echo "${address}" | cut -d'.' -f1-3)" | grep UG | tr -s ' ' | cut -d' ' -f3)
#	set_config_value GW_DEFAULT "${gateway}"
#	set_config_value ETH_DEFAULT "${interface}"
#	set_config_value MASK_DEFAULT "${mask}"
#	set_config_value EXTERNAL_IP "${address}"
#}

# ------------------------------------------------------------------------------------------
#
# 	Устанавливаем маршрут по умолчанию из переданных аргументов
#
# ------------------------------------------------------------------------------------------
ip4_up_net_default(){

	interface=${1}; address=${2}; mask=${3}; gateway=${4};

	if [ -z "${gateway}" ] || [ -z "${interface}" ] ||[ -z "${address}" ] || [ -z "${mask}" ]; then
		log_error "ip4_up_net_default::Отсутствуют аргументы для запуска."
		exit 1
	else
		{
			ifconfig ${interface} down
			ifconfig ${interface} ${address} netmask ${mask} up
			route add default gw ${gateway} ${interface}

		} 2> "${ERROR_LOG_FILE}"
		when_error "${?}" "ip4_up_net_default::Ошибка при установке подключения к интернету: ip=${address}, mask=${mask}, gw=${gateway}, interface=${interface}"
	fi
}

# ------------------------------------------------------------------------------------------
#
# 	Устанавливаем маршрут по умолчанию из данных файла конфигурации
#
# ------------------------------------------------------------------------------------------
#ip4_up_net_default_from_config(){
#
#	gateway=$(get_config_value GW_DEFAULT)
#	mask=$(get_config_value MASK_DEFAULT)
#	interface=$(get_config_value ETH_DEFAULT)
#	address=$(get_config_value EXTERNAL_IP)
#
#	ip4_up_net_default "${interface}" "${address}" "${mask}" "${gateway}"
#
#}

# ------------------------------------------------------------------------------------------
#
# 	Проверяем маршрут по умолчанию и если он отсутствует устанавливаем его
#
# ------------------------------------------------------------------------------------------
#ip4_route_get_route_default(){
#	ip route list | grep -q default || {
#		ip4_up_net_default
#	}
#}

cmd_tunnel() {
	local output
	local cache

	print_line
	echo 'Интернет'
	print_line

	cache=$(curl -s '127.0.0.1:79/rci/show/internet/status')

	output=$(echo "${cache}" | jq -r '.internet // empty')
	if [ "${output}" == 'true' ]; then
		output='есть'
	else
		output='нет'
	fi
	ready 'Доступ' && when_ok "${output}"
}

cmd_route_refresh() {
	echo -n 'Очистка цепочек iptables...'
	ip4__flush 'chain'
	echo 'сделана.'

	echo -n 'Создание недостающих правил iptables...'
	ip4__dns__add_routing_for_home
	ip4_firewall_set_all_rules
	echo 'сделано.'
}

route__text_empty() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не передан обязательный параметр — строка настроек"
		return
	fi

	echo "Отсутствуют. Можете указать строчку в ${KVAS_CONF_FILE}"
	echo "${1}"
	echo 'и вызвать после этого kvas route refresh'
}

route__text_from_ips() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не передан обязательный параметр — строка"
		return
	fi

	local find
	for ip_or_range in ${1//+/ } ; do
		find=$( echo "$(get_ips_known)" | grep -F -- "${ip_or_range} " )
		if [ -n "${find}" ] ; then
			echo "${find}"
		else
			echo "${ip_or_range}"
		fi
	done
}

route__text_from_nets() {
	if [ -z "${1}" ] ; then
		error "[${FUNCNAME}] Не передан обязательный параметр — строка"
		return
	fi
	echo "${1// /'\n'}"
}

cmd_route() {
	# если вызывается как один из дебагов, то можно передать silent/short
	if [ -z "${1}" ] ; then
		echo 'Вывод критериев попадания в тоннель:'
		echo 'какие сети и устройства, есть ли проверка вхождения в списки.'
		echo
	fi

	local output

	output=$(get_config_value 'route_full_ip')
	if [ -n "${output}" ] ; then
		output=$(route__text_from_ips "${output}")
	elif [ -z "${1}" ] ; then
		output=$(route__text_empty 'route_full_ip=192.168.1.51+192.168.2.51')
	fi
	echo_debug 'IP, весь трафик которых идёт в тоннель' "${output}"

	output=$(get_config_value 'route_by_list_ip')
	if [ -n "${output}" ] ; then
		output=$(route__text_from_ips "${output}")
	elif [ -z "${1}" ] ; then
		output=$(route__text_empty 'route_by_list_ip=192.168.2.52+192.168.2.53')
	fi
	echo_debug 'IP с перехватом DNS, трафик которых идёт в тоннель согласно спискам' "${output}"

	output="br0 $(get_guest_inface_list_from_config)"
	echo_debug 'Сети с перехватом DNS, трафик которых идёт в тоннель согласно спискам' $(route__text_from_nets "${output}")

	output=$(get_config_value 'route_excluded_ip')
	if [ -n "${output}" ] ; then
		output=$(route__text_from_ips "${output}")
	elif [ -z "${1}" ] ; then
		output=$(route__text_empty 'route_excluded_ip=192.168.1.52+192.168.1.53')
	fi
	echo_debug 'IP, исключённые из перехвата DNS и трафика' "${output}"

	# если вызывается как один из дебагов, то можно передать silent/short
	if [ -z "${1}" ] ; then
		output=$(get_ips_known)
		if [ -z "${output}" ] ; then
			output=$(printf '%s\n' \
				'Отсутствуют. В админке роутера закрепите постоянный IP-адрес за любым устройством,' \
				'чтобы использовать его здесь.' \
			)
		else
			output=$(echo "${output}" | xargs -n2 printf '%-15s | %s\n')
		fi
		echo_debug 'Зарегистрированные клиенты c постоянным IP-адресом' "${output}"
	fi
}
