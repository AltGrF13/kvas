#!/bin/sh
# ------------------------------------------------------------------------------------------
#
# 	ПРОЕКТ КВАС
#
# 	Данный файл служит для поддержки vless протокола
#   Реализованы такие функции:
#		- получение списка тегов
#		- получение списка доменных имен по тегу
#		- добавление доменного имени по тегу в список
#		- удаление доменного имени по тегу из списка
#
# ------------------------------------------------------------------------------------------
#
#	Разработчик: kvas@zeleza.ru
#	Дата: 09/09/2024
#	Лицензия: Apache License 2.0
#
# ------------------------------------------------------------------------------------------

. /opt/apps/kvas/bin/libs/main

XRAY=/opt/sbin/xray
XRAY_INIT=/opt/etc/init.d/S24xray

VLESS_CONFIG_FILE=/opt/etc/xray/kvas.json
VLESS_CONFIG_ORIGINAL_FILE=/opt/apps/kvas/etc/conf/kvas.vless
VLESS_CONFIG_FILE_BACKUP=${KVAS_BACKUP_PATH}/kvas.json

PROXY_VLESS_DESC="Kvas proxy-vless-connection"
PROXY_LOCAL_IP="127.0.0.1"
PROXY_INFACE_NUMEBER=21
PROXY_VLESS_NAME=Proxy${PROXY_INFACE_NUMEBER}
PROXY_VLESS_PORT=1097
PROXY_VLESS_PROTO=socks5
DOMAIN_FOR_CHECK="ifconfig.me"


has_package_installed() {
#-------------------------------------------------------------------------------
#
#	Функция проверяет установлен ли пакет Proxy
#
#-------------------------------------------------------------------------------
    grep -q "<name>${1}</name>" /etc/components.xml
}

has_package_uninstalled() {
#-------------------------------------------------------------------------------
#
#       Функция проверяет установлен ли пакет Proxy
#
#-------------------------------------------------------------------------------
    ! grep -q "<name>${1}</name>" /etc/components.xml
}

has_xray_enable(){
#-------------------------------------------------------------------------------
#
#	Функция проверяет, включен ли Xray
#
#-------------------------------------------------------------------------------
    # [ -x "${XRAY}" ] && [ -f "${XRAY_INIT}" ] && [ "$("${XRAY_INIT}" status)" = 'alive' ]
    [ -f "${XRAY_INIT}" ] && [ "$("${XRAY_INIT}" status)" = 'alive' ]
}

has_proxy_inface_selected(){
#-------------------------------------------------------------------------------
#
#	Функция проверяет, является ли интерфейс Proxy Vless Kvas
#   выбранным соединением или нет
#
#-------------------------------------------------------------------------------
    proxy_entware_id=$(get_config_value INFACE_ENT)
    [ "${proxy_entware_id}" = "${PROXY_VLESS_NAME}" ]

}

api_post_query(){
#-------------------------------------------------------------------------------
#
#	Функция отправляет запросы к API Keenetic
#
#-------------------------------------------------------------------------------

	local _data=${1}
    local _query=${2:-}
	local _result

	if [ -z "${_data}" ]; then
		curl -s "localhost:79/rci/${_query}"
	else
		curl -s -d "${_data}" "localhost:79/rci/${_query}"
	fi

}

api_get_query(){
#-------------------------------------------------------------------------------
#
#	Функция отправляет запросы к API Keenetic
#
#-------------------------------------------------------------------------------

    local _query=${1}
    local _result
    curl -s "localhost:79/rci/${_query}"

}

vless_link_parse() {
#-------------------------------------------------------------------------------
#
#	Функция парсит параметры из ссылки
#
#-------------------------------------------------------------------------------

    local link="$1"
    local tag="${link/vless://}"
    local _vless_file=${2:-$VLESS_CONFIG_FILE}
    # парсим параметры из ссылки vless://

    local vless_id=$(echo "${tag}" | sed 's/.*\/\/\(.*\)@.*/\1/' )
    local vless_address=$(echo "${tag}" | sed 's/.*@\(.*\):.*/\1/')
    local vless_port=$(echo "${tag}" | sed 's/.*@.*:\(.*\)?.*/\1/')
    local vless_network=$(echo "${tag}" | sed 's/.*\?type=\(.*\)&.*/\1/' | cut -d'&' -f1)
    local vless_sni=$(echo "${tag}" | sed 's/.*\?type=.*&sni=\(.*\)/\1/' | cut -d'&' -f1)
    local vless_short_id=$(echo "${tag}" | sed 's/.*\?type=.*&sid=\(.*\)/\1/' | cut -d'&' -f1)
    local vless_browser_fp=$(echo "${tag}" | sed 's/.*\?type=.*&fp=\(.*\)/\1/' | cut -d'&' -f1)
    local vless_pub_key=$(echo "${tag}" | sed 's/.*\?type=.*&pbk=\(.*\)/\1/' | cut -d'&' -f1)
    local vless_security=$(echo "${tag}" | sed 's/.*\?type=.*&security=\(.*\)/\1/' | cut -d'&' -f1)

    # Проверка наличия обязательных параметров

    [ "${vless_security}" = "reality" ] || {
        error "Тип протокола ${vless_security} не поддерживается"; exit 1
    }
    [ -z "${vless_id}" ] && {
        vless_id=$(echo "${tag}" | sed 's/\(.*\)@.*:.*/\1/')
        [ -z "${vless_id}" ] && {
                error "Не задан идентификатор пользователя"; exit 1
        }
    }
    [ -z "${vless_address}" ] && {
        error "Не задан адрес сервера"; exit 1
    }
    [ -z "${vless_port}" ] && {
        error "Не задан порт сервера"; exit 1
    }
    [ -z "${vless_network}" ] && {
        error "Не задан тип сетевого соединения"; exit 1
    }
    [ -z "${vless_sni}" ] && {
        error "Не задано имя сервера"; exit 1
    }
    [ -z "${vless_short_id}" ] && {
        error "Не задан сокращенный id "; exit 1
    }
    [ -z "${vless_browser_fp}" ] && {
        error "Не задан тип браузера"; exit 1
    }
    [ -z "${vless_pub_key}" ] && {
        error "Не задан публичный ключ сервера"; exit 1
    }

    # Меняем значения в конфигурационном файле
    sed -i "\
        /inbounds/,/outbounds/ {\
            s/\(.*listen\": \).*\(\,\)/\1\"${PROXY_LOCAL_IP}\"\2/; \
            s/\(.*port\": \).*\(\,\)/\1\"${PROXY_VLESS_PORT}\"\2/; \
	    }; \
        /outbounds/,/realitySettings/ {\
            s/\(.*address\": \).*\(\,\)/\1\"${vless_address}\"\2/; \
	        s/\(.*port\": \).*\(\,\)/\1${vless_port}\2/; \
	        s/\(.*id\": \).*\(\,\)/\1\"${vless_id}\"\2/; \
	    };  \
        /streamSettings/,/tag/ {\
            s/\(.*network\": \).*\(\,\)/\1\"${vless_network}\"\2/;  \
            s/\(.*publicKey\": \).*\(\,\)/\1\"${vless_pub_key}\"\2/; \
            s/\(.*fingerprint\": \).*\(\,\)/\1\"${vless_browser_fp}\"\2/; \
            s/\(.*serverName\": \).*\(\,\)/\1\"${vless_sni}\"\2/;
            s/\(.*shortId\": \).*\(\,\)/\1\"${vless_short_id}\"\2/;
	    };"  \
   "${_vless_file}"

    return 0
}



set_cursor_to_line_above() {
#-------------------------------------------------------------------------------
#
#	Функция устанавливает курсор на одну строку вверх на первую позицию
#   и стираем содержимое строки выше
#
#-------------------------------------------------------------------------------
    echo -en "\033[1A\033[2K"
}



delete_proxy_interface() {
#-------------------------------------------------------------------------------
#
#	Функция удаляет Proxy интерфейс
#
#-------------------------------------------------------------------------------
    # Удаляем конфигурацию профиля Proxy перед установкой такой же конфигурации
    api_post_query  '[{"interface": { "name": "'${PROXY_VLESS_NAME}'","no": true },"system": {"configuration": {"save": true}}}]' &> /dev/null
}


cmd_install_proxy_package() {
#-------------------------------------------------------------------------------
#
#	Функция устанавливает пакет Proxy
#
#-------------------------------------------------------------------------------
    if ! has_package_installed 'Proxy client' ; then

        # echo -e "${GREEN}Устанавливаем пакет Proxy client...${NOCL}"
        # print_line
        # echo -e "${RED}Внимание${NOCL}"
        # echo -e "После установки пакета последует перезагрузка устройства."
        # echo -e "Далее,после перезагрузки и подключения к локальной сети "
        # echo -e "роутера Вам необходимо заново войти на устройство через ssh."
        # print_line

        # Ожидаем ответа на вопрос о продолжении установки Proxy клиента
        # read_ynq "Продолжить установку Proxy клиента?" q && {
        #     [[ "${q}" =~ [qQ] ]] && exit 0
        # }

        # Создаем запись в файле /opt/etc/profile для продолжения установки Proxy клиента
        # DEBUG - восстановить после отладки
        echo "kvas vless" >> /opt/etc/profile
        # echo "/opt/root/vless.dev" >> /opt/etc/profile

        #  Ставим пакет proxy в очередь на установку
        system_packages_action install proxy opkg-kmod-netfilter opkg-kmod-netfilter-addons && create_proxy_interface || return 1

    else

        # продолжение установки Proxy клиента
# UDP вариант
        # data='{
        #     "name": "'${PROXY_VLESS_NAME}'",
        #     "proxy": {
        #         "protocol": {
        #             "proto": "'${PROXY_VLESS_PROTO}'",
        #         },
        #         "socks5-udp": '${PROXY_VLESS_UDP}'
        #         "udpgw-upstream": {
        #             "host": "127.0.0.1",
        #             "port": "'${PROXY_VLESS_PORT}'"
        #         }
        #     }
        # }'
        create_proxy_interface
        

        return 0
    fi
set +xeu
}


create_proxy_interface(){
#-------------------------------------------------------------------------------
#
#   Функция для создания интерфейса для Proxy клиента и задает ему его свойства по умолчанию
#
#-------------------------------------------------------------------------------

    delete_proxy_interface

    data='[{
        "interface": {
            "name": "'${PROXY_VLESS_NAME}'",
            "description": "'${PROXY_VLESS_DESC}'",
            "proxy": {
                "protocol": {
                    "proto": "'${PROXY_VLESS_PROTO}'"
                },
                "upstream": {
                    "host": "'${PROXY_LOCAL_IP}'",
                    "port": "'${PROXY_VLESS_PORT}'"
                }
            }
        },
        "system": {
            "configuration": {
                "save": true
            }
        }
    }]'

    # создаем интерфейс для Proxy клиента и задает ему его свойства по умолчанию
    api_post_query "${data}" "" &> /dev/null

    # удаляем запись в файле /opt/etc/profile, чтобы прекратить повторную установку Proxy клиента
    # DEBUG - восстановить после отладки
    sed -i '/kvas vless/d' /opt/etc/profile
    # sed -i '/\/opt\/root\/vless.dev/d' /opt/etc/profile

}

has_xray_installed(){
#-------------------------------------------------------------------------------
#
#	Функция проверяет установлен ли пакет xray
#
#-------------------------------------------------------------------------------
	# ! opkg files xray | grep -q 'xray not installed'
    [ -f "${XRAY}" ]
}



proxy_package_progress(){
#-------------------------------------------------------------------------------
#
#	Функция отображает прогресс установки системного пакета
#
#-------------------------------------------------------------------------------
    local action="$1"
    local sys_text="системных пакетов"

# set -xeu
    local act_text="Установка"; done_txt="а"
    [ "${action}" = "remove" ] && {
        act_text="Удаление"; done_txt="о"
    }

    # Ожидаем завершения установки Proxy клиента
    local progress=0
    
    ready "${GREEN}${act_text} ${sys_text}${NOCL}" && when_alert "ЗАПУСКАЕМ"

    until status=$(api_get_query "show/components/status") && ! echo "${status}" | grep -q pending ; do sleep 3; done
    set_cursor_to_line_above

    # цикл выполняется до 100%
    while progress=$(api_get_query "show/components/status" | jq -r '.update["progress"]' ) && [ "${progress}" != "null" ]; do

        # на предыдущей позиции выводим прогресс выполнения установки пакета
        ready "${BLUE}${act_text} ${sys_text}${NOCL}" && when_alert "${progress}%"

        # Ждем 1 секунду
        sleep 1

        # Переводим курсор на одну строку вверх на первую позицию и стираем содержимое строки выше
        set_cursor_to_line_above

    done
    # set_cursor_to_line_above
    ready "${GREEN}${act_text} ${sys_text} завершен${done_txt}${NOCL}" && when_ok "УСПЕШНО"
    print_line
    echo -e "${RED}Сейчас устройство будет перезагружено...${NOCL}"
    
set +xeu

}

system_packages_action(){
#-------------------------------------------------------------------------------
#
#	Функция производит действия с системным пакетом
#
#-------------------------------------------------------------------------------

    local action="$1"; shift
    local packages="$@"

    local act_text="установлен"
    [ "${action}" = "remove" ] && act_text="удален"

    # local data='[
    #     {
    #         "components": {
    #             "'${action}'": {
    #                 "component": "'${package_name}'"
    #             },
    #             "commit": true
    #         }
    #     }
    # ]'
# set -xeu
    # Проверяем интернет подключение
    has_no_internet_here && {
        error "Интернет не доступен. Проверьте свое интернет продключение. "
        exit 1
    }
# set -xeu
    local printline=false
    local acted=false
    local _list_to_act=""
    # Проверяем, что пакеты установлены
    for package in ${packages}; do
        if [ "${action}" = "remove" ] ; then
            has_package_uninstalled "${package}" && acted=true
        else
            has_package_installed "${package}" && acted=true
        fi
        if [ "${acted}" = true ] ; then
            warning "Пакет ${package} уже ${act_text}."
            printline=true
            acted=false
        else
            _list_to_act="${_list_to_act} ${package}"
        fi
    done

    [ "${printline}" = "true" ] && print_line

    # если не все пакеты обработаны (установлены ли удалены)
    if [ -n "${_list_to_act}" ]; then
set +xeu
        # Заправшиваем список установленных пакетов
        until status=$( api_post_query "{}" "components/list" ) && ! echo "${status}" | grep -q continued; do sleep 3; done
# set -xeu
        for package in ${_list_to_act}; do
            local data='[{"components": {"'${action}'": {"component": "'${package// /}'"}}}]'
            out=$(api_post_query "${data}")
            echo "${out}" | grep -q " is unavailable" && {
                data='[{"components": {"'${action}'": {"component": "'${package// /}'"}}}]'
                out=$(api_post_query "${data}")
                echo "${out}" | grep -q " is unavailable" && {
                    error "Пакет ${package} не доступен. Проверьте правильность написания пакета."
                    return 1
                }
            }
        done

        # Подтверждаем установку или удаление пакетов
        api_post_query '[{"components": {"commit": true}}]' &> /dev/null

        # Отрисовываем индикатор процесса установки пакетов
        # и ожидаем его завершения
        proxy_package_progress "${action}"
        return 1
    else 
        return 0
    fi

set +xeu
}


test_vless_proxy() {
#-------------------------------------------------------------------------------
#
#	Функция проверяет работу Proxy Vless на доступность доменного имени
#
#-------------------------------------------------------------------------------
    local _inface=${1}
    # iface=$(ip a | grep global | grep t2s_br${PROXY_INFACE_NUMEBER} | sed 's/.*\(t2s_br'${PROXY_INFACE_NUMEBER}'\)/\1/g')
    ready "Проверка соединения ${PROXY_VLESS_DESC} к ${DOMAIN_FOR_CHECK}"
    local _out=$(curl -s --interface ${_inface} ${DOMAIN_FOR_CHECK})
    if echo "${_out}" | tail -n 1 | grep -qE "${IP_FILTER}" ; then
        when_ok "УСПЕШНО"
    else
        when_bad "С ОШИБКАМИ"
        print_line
        echo "${_out}" && echo
        print_line
    fi
}

_cmd_install_vless_proxy(){
#-------------------------------------------------------------------------------
#
#	Системная функция, которая запускает установку Proxy Vless
#
#-------------------------------------------------------------------------------

    cmd_install_proxy_package

    vless_ln=''
    has_xray_installed || opkg install xray &> /dev/null
    #read_value "Введите vless ссылку: " vless_ln string

    # DEBUG - восстановить после отладки
    # cp "${VLESS_CONFIG_ORIGINAL_FILE}" "${VLESS_CONFIG_FILE}"
    cp ~/kvas.vless "${VLESS_CONFIG_FILE}"

    . /opt/apps/kvas/.env
    vless_ln="${VLESS_LINK}"

    vless_link_parse "${vless_ln}" "${VLESS_CONFIG_FILE}"
    #cat "${VLESS_CONFIG_FILE}"

    # Проверка конфигурации xray
    check_xray_config=$(${XRAY} run -test -c ${VLESS_CONFIG_FILE})

    if echo "${check_xray_config}" | grep -q "Configuration OK." ; then
        # Запуск xray в случае, если конфигурация xray не содержит ошибок
        ${XRAY_INIT} restart && kvas vpn set
    else
        # В случае если есть ошибки выводим их в консоль
        echo -e "${BLUE}В файле ${VLESS_CONFIG_FILE} обнаружены следующие ошибки:${NOCL}"
        print_line
        echo -e "${RED}${check_xray_config}${NOCL}"
    fi


}

_cmd_remove_vless_proxy(){
#-------------------------------------------------------------------------------
#
#	Функция удаляет Proxy Vless пакеты и конфигурацию,
#   чтоб привести Квас к базовому состоянию для отладки пакета
#
#-------------------------------------------------------------------------------
    # Удаляем пакет xray
    has_package_installed 'Proxy client' && {

        # Останавливаем службу xray
        ${XRAY_INIT} stop &> /dev/null

        # Удаляем пакет xray
        opkg remove xray &> /dev/null

        # Удаляем конфигурациюs
        rm -f "${VLESS_CONFIG_FILE}"

        # Удаляем конфигурацию профиля Proxy
        delete_proxy_interface

        #  Ставим пакет proxy в очередь на удаление
        system_packages_action remove proxy

    }

}


#system_packages_action remove proxy opkg-kmod-netfilter opkg-kmod-netfilter-addons
# system_packages_action install proxy opkg-kmod-netfilter opkg-kmod-netfilter-addons
# cmd_install_vless_proxy
# ifs=$(ip a | grep global | grep t2s_ | sed 's/.*\(t2s_.*\)/\1/g')
# curl -v -i ${ifs} ifconfig.me && echo
