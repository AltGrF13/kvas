#!/bin/sh
# ------------------------------------------------------------------------------------------
#
# 	ПРОЕКТ КВАС
#
# 	Данный файл служит для поддержки vless протокола
#   Реализованы такие функции:
#		- получение списка тегов
#		- получение списка доменных имен по тегу
#		- добавление доменного имени по тегу в список
#		- удаление доменного имени по тегу из списка
#
# ------------------------------------------------------------------------------------------
#
#	Разработчик: kvas@zeleza.ru
#	Дата: 09/09/2024
#	Лицензия: Apache License 2.0
#
# ------------------------------------------------------------------------------------------

. /opt/apps/kvas/bin/libs/main

XRAY=/opt/sbin/xray
XRAY_INIT=/opt/etc/init.d/S97xray

VLESS_CONFIG_FILE=/opt/etc/xray/kvas.json
VLESS_CONFIG_ORIGINAL_FILE=/opt/apps/kvas/etc/conf/kvas.vless
VLESS_CONFIG_FILE_BACKUP=${KVAS_BACKUP_PATH}/kvas.json

PROXY_VLESS_DESC="Vless Proxy Kvas connection"
PROXY_LOCAL_IP="127.0.0.1"
PROXY_INFACE_NUMEBER=21
PROXY_VLESS_NAME=Proxy${PROXY_INFACE_NUMEBER}
PROXY_VLESS_PORT=1097
PROXY_VLESS_PROTO=socks5
DOMAIN_FOR_CHECK="ifconfig.me"


has_xray_enable(){  
#-------------------------------------------------------------------------------
#
#	Функция проверяет, включен ли Xray
#
#-------------------------------------------------------------------------------
    [ -x "${XRAY}" ] && [ -f "${XRAY_INIT}" ] && [ "$("${XRAY_INIT}" status)" = 'alive' ]
}

has_proxy_inface_selected(){
#-------------------------------------------------------------------------------
#
#	Функция проверяет, является ли интерфейс Proxy Vless Kvas 
#   выбранным соединением или нет
#
#-------------------------------------------------------------------------------
    proxy_entware_id=$(get_config_value INFACE_ENT)
    [ "${proxy_entware_id}" = "${PROXY_VLESS_NAME}" ]

}

api_post_query(){
#-------------------------------------------------------------------------------
#
#	Функция отправляет запросы к API Keenetic
#
#-------------------------------------------------------------------------------

	local _data=${1}
    local _query=${2:-}
	local _result

	if [ -z "${_data}" ]; then
		curl -s "localhost:79/rci/${_query}" 
	else
		curl -s -d "${_data}" "localhost:79/rci/${_query}" 
	fi

}

api_get_query(){
#-------------------------------------------------------------------------------
#
#	Функция отправляет запросы к API Keenetic
#
#-------------------------------------------------------------------------------

    local _query=${1}
    local _result
    curl -s "localhost:79/rci/${_query}"

}

vless_link_parse() {
#-------------------------------------------------------------------------------
#
#	Функция парсит параметры из ссылки
#
#-------------------------------------------------------------------------------

    local link="$1"
    local tag="${link/vless://}"
    local _vless_file=${2:-$VLESS_CONFIG_FILE}
    # парсим параметры из ссылки vless://

    local vless_id=$(echo "${tag}" | sed 's/.*\/\/\(.*\)@.*/\1/' )
    local vless_address=$(echo "${tag}" | sed 's/.*@\(.*\):.*/\1/')
    local vless_port=$(echo "${tag}" | sed 's/.*@.*:\(.*\)?.*/\1/')
    local vless_network=$(echo "${tag}" | sed 's/.*\?type=\(.*\)&.*/\1/' | cut -d'&' -f1)
    local vless_sni=$(echo "${tag}" | sed 's/.*\?type=.*&sni=\(.*\)/\1/' | cut -d'&' -f1)
    local vless_short_id=$(echo "${tag}" | sed 's/.*\?type=.*&sid=\(.*\)/\1/' | cut -d'&' -f1)
    local vless_browser_fp=$(echo "${tag}" | sed 's/.*\?type=.*&fp=\(.*\)/\1/' | cut -d'&' -f1)
    local vless_pub_key=$(echo "${tag}" | sed 's/.*\?type=.*&pbk=\(.*\)/\1/' | cut -d'&' -f1)
    local vless_security=$(echo "${tag}" | sed 's/.*\?type=.*&security=\(.*\)/\1/' | cut -d'&' -f1)

    # Проверка наличия обязательных параметров

    [ "${vless_security}" = "reality" ] || {
        error "Тип протокола ${vless_security} не поддерживается"; exit 1
    }
    [ -z "${vless_id}" ] && {
	vless_id=$(echo "${tag}" | sed 's/\(.*\)@.*:.*/\1/')
	[ -z "${vless_id}" ] && {
        	error "Не задан идентификатор пользователя"; exit 1
	}
    }
   [ -z "${vless_address}" ] && {
        error "Не задан адрес сервера"; exit 1
    }
    [ -z "${vless_port}" ] && {
        error "Не задан порт сервера"; exit 1
    }
    [ -z "${vless_network}" ] && {
        error "Не задан тип сетевого соединения"; exit 1
    }
    [ -z "${vless_sni}" ] && {
        error "Не задано имя сервера"; exit 1
    }
    [ -z "${vless_short_id}" ] && {
        error "Не задан сокращенный id "; exit 1
    }
    [ -z "${vless_browser_fp}" ] && {
        error "Не задан тип браузера"; exit 1
    }
    [ -z "${vless_pub_key}" ] && {
        error "Не задан публичный ключ сервера"; exit 1
    }

    # Меняем значения в конфигурационном файле
    sed -i "\
        /inbounds/,/outbounds/ {\
            s/\(.*listen\": \).*\(\,\)/\1\"${PROXY_LOCAL_IP}\"\2/; \
            s/\(.*port\": \).*\(\,\)/\1\"${PROXY_VLESS_PORT}\"\2/; \
	    }; \
        /outbounds/,/realitySettings/ {\
            s/\(.*address\": \).*\(\,\)/\1\"${vless_address}\"\2/; \
	        s/\(.*port\": \).*\(\,\)/\1${vless_port}\2/; \
	        s/\(.*id\": \).*\(\,\)/\1\"${vless_id}\"\2/; \
	    };  \
        /streamSettings/,/tag/ {\
            s/\(.*network\": \).*\(\,\)/\1\"${vless_network}\"\2/;  \
            s/\(.*publicKey\": \).*\(\,\)/\1\"${vless_pub_key}\"\2/; \
            s/\(.*fingerprint\": \).*\(\,\)/\1\"${vless_browser_fp}\"\2/; \
            s/\(.*serverName\": \).*\(\,\)/\1\"${vless_sni}\"\2/;
            s/\(.*shortId\": \).*\(\,\)/\1\"${vless_short_id}\"\2/;
	    };"  \
   "${_vless_file}"

    return 0
}


has_proxy_package_installed() {
#-------------------------------------------------------------------------------
#
#	Функция проверяет установлен ли пакет Proxy
#
#-------------------------------------------------------------------------------
    grep -q 'Proxy client' /etc/components.xml 
}

set_cursor_to_line_above() {
#-------------------------------------------------------------------------------
#
#	Функция устанавливает курсор на одну строку вверх на первую позицию 
#   и стираем содержимое строки выше
#
#-------------------------------------------------------------------------------
    echo -en "\033[1A\033[2K"
}



delete_proxy_interface() {
#-------------------------------------------------------------------------------
#
#	Функция удаляет Proxy интерфейс
#
#-------------------------------------------------------------------------------
    # Удаляем конфигурацию профиля Proxy перед установкой такой же конфигурации
    api_post_query  '[{"interface": { "name": "'${PROXY_VLESS_NAME}'","no": true },"system": {"configuration": {"save": true}}}]' &> /dev/null
}


cmd_install_proxy_package() {
#-------------------------------------------------------------------------------
#
#	Функция устанавливает пакет Proxy
#
#-------------------------------------------------------------------------------
    if ! has_proxy_package_installed ; then

        echo -e "${GREEN}Устанавливаем пакет Proxy client...${NOCL}"
        print_line
        echo -e "${RED}Внимание${NOCL}"
        echo -e "После установки пакета последует перезагрузка устройства."
        echo -e "Далее,после перезагрузки и подключения к локальной сети "
        echo -e "роутера Вам необходимо заново войти на устройство через ssh."
        print_line

        # Ожидаем ответа на вопрос о продолжении установки Proxy клиента
        # read_ynq "Продолжить установку Proxy клиента?" q && { 
        #     [[ "${q}" =~ [qQ] ]] && exit 0
        # }

        # Создаем запись в файле /opt/etc/profile для продолжения установки Proxy клиента
        # DEBUG - восстановить после отладки
        echo "kvas vless" >> /opt/etc/profile
        # echo "/opt/root/vless.dev" >> /opt/etc/profile

        #  Ставим пакет proxy в очередь на установку  
        system_package_action install proxy
        return 1

    else
        
        # продолжение установки Proxy клиента
# UDP вариант
        # data='{
        #     "name": "'${PROXY_VLESS_NAME}'",
        #     "proxy": {
        #         "protocol": {
        #             "proto": "'${PROXY_VLESS_PROTO}'",
        #         },
        #         "socks5-udp": '${PROXY_VLESS_UDP}'
        #         "udpgw-upstream": {
        #             "host": "127.0.0.1",
        #             "port": "'${PROXY_VLESS_PORT}'"
        #         }
        #     }
        # }'

        delete_proxy_interface

        data='[{
            "interface": {
                "name": "'${PROXY_VLESS_NAME}'",
                "description": "'${PROXY_VLESS_DESC}'",
                "proxy": {
                    "protocol": {
                        "proto": "'${PROXY_VLESS_PROTO}'"
                    },
                    "upstream": {
                        "host": "'${PROXY_LOCAL_IP}'",
                        "port": "'${PROXY_VLESS_PORT}'"
                    }
                }
            },
            "system": {
                "configuration": {
                    "save": true
                }
            }
        }]'

        # создаем интерфейс для Proxy клиента и задает ему его свойства по умолчанию
        api_post_query "${data}" "" #&> /dev/null

        # удаляем запись в файле /opt/etc/profile, чтобы прекратить повторную установку Proxy клиента
        # DEBUG - восстановить после отладки
        sed -i '/kvas vless/d' /opt/etc/profile
        # sed -i '/\/opt\/root\/vless.dev/d' /opt/etc/profile

        return 0
    fi
set +xeu
}

has_xray_installed(){
#-------------------------------------------------------------------------------
#
#	Функция проверяет установлен ли пакет xray
#
#-------------------------------------------------------------------------------
	# ! opkg files xray | grep -q 'xray not installed'
    [ -f "${XRAY}" ]
}



proxy_package_progress(){
#-------------------------------------------------------------------------------
#
#	Функция отображает прогресс установки системного пакета
#
#-------------------------------------------------------------------------------
    local action="$1"
    
# set -xeu    
    local act_text="Установка"
    [ "${action}" = "remove" ] && act_text="Удаление"

    # Ожидаем завершения установки Proxy клиента
    local progress=0 
    api_get_query "show/components/status"
    print_line
    ready "${GREEN}${act_text} Proxy клиента${NOCL}" && when_alert "ЗАПУСКАЕМ"
    print_line
    sleep 3

    until status=$( api_get_query "show/components/status" | grep -q pending ) && [ -n "${status}" ] > /dev/null 2>&1; do sleep 2; done

    # цикл выполняется до 100%
    while [ "${progress}" != "null" ]; do
        # получаем текущее состояние установки
        progress=$(api_get_query "show/components/status" | jq -r '.update["progress"]' )
echo "${progress}"        
        # на предыдущей позиции выводим прогресс выполнения установки пакета
        ready "${BLUE}${act_text} Proxy клиента${NOCL}" && when_alert "${progress}%"
        # Переводим курсор на одну строку вверх на первую позицию и стираем содержимое строки выше
        set_cursor_to_line_above

        # Ждем 0,3 секунды
        sleep 1
    done

    print_line
    ready "${GREEN}${act_text} Proxy клиента завершена${NOCL}" && when_ok "УСПЕШНО"
    print_line
    echo -e "${RED}Сейчас устройство будет перезагружено...${NOCL}"
    print_line
set +xeu

}

system_package_action(){
#-------------------------------------------------------------------------------
#
#	Функция производит действия с системным пакетом
#
#-------------------------------------------------------------------------------    

    local action="$1"
    local package_name="$2"

    # local data='[
    #     {
    #         "components": {
    #             "'${action}'": {
    #                 "component": "'${package_name}'"
    #             },
    #             "commit": true
    #         }
    #     }
    # ]'

    local cmd_query
    # local data='{"'${action}'": {"component": "'${package_name}'"}}'
    # local data1='{"commit": {"component": "'${package_name}'"}}'
    # local data1='{"commit": true}'
    # local data2='[{"components": {"'${action}'": {"component": "'${package_name}'"}}}]'
    local data='[{"components": {"'${action}'": {"component": "'${package_name}'"},"commit": true}}]'
    echo "${data}"
    # echo "${data1}"
    # Выполняем запрос 
    out=$(api_post_query "${data}")
    # out1=$(api_post_query "${data1}" components)
    echo "${out}"
    # echo "${out1}"
    echo "${out}" | grep -q " is unavailable" && {
        error "Пакет ${package_name} не доступен."
        return 1
     } #&> /dev/null

    # Отрисовываем индикатор процесса установки Proxy клиента 
    # и ожидаем его завершения
    proxy_package_progress "${action}" 
}


test_vless_proxy() {
#-------------------------------------------------------------------------------
#
#	Функция проверяет работу Proxy Vless на доступность доменного имени
#
#-------------------------------------------------------------------------------     
    # iface=$(ip a | grep global | grep t2s_br${PROXY_INFACE_NUMEBER} | sed 's/.*\(t2s_br'${PROXY_INFACE_NUMEBER}'\)/\1/g')
    ready "Соединение ${PROXY_VLESS_DESC} работает..."
    if curl -i t2s_br${PROXY_INFACE_NUMEBER} ${DOMAIN_FOR_CHECK} && echo | tail -n 1 | grep -q ${IP_FILTER} ; then
        when_ok "ХОРОШО"
    else  
        when_bad "С ОШИБКАМИ" 
        print_line
        curl -i t2s_br${PROXY_INFACE_NUMEBER} ${DOMAIN_FOR_CHECK} && echo
        print_line
    fi
}

_cmd_install_vless_proxy(){
#-------------------------------------------------------------------------------
#
#	Системная функция, которая запускает установку Proxy Vless
#
#-------------------------------------------------------------------------------

    cmd_install_proxy_package

    vless_ln=''
    has_xray_installed || opkg install xray &> /dev/null
    #read_value "Введите vless ссылку: " vless_ln string

    # DEBUG - восстановить после отладки
    # cp "${VLESS_CONFIG_ORIGINAL_FILE}" "${VLESS_CONFIG_FILE}"   
    cp ~/kvas.vless "${VLESS_CONFIG_FILE}"
    
    . /opt/apps/kvas/.env
    vless_ln="${VLESS_LINK}"

    vless_link_parse "${vless_ln}" "${VLESS_CONFIG_FILE}"
    #cat "${VLESS_CONFIG_FILE}"

    # Проверка конфигурации xray
    check_xray_config=$(${XRAY} run -test -c ${VLESS_CONFIG_FILE})

    if echo "${check_xray_config}" | grep -q "Configuration OK." ; then
        # Запуск xray в случае, если конфигурация xray не содержит ошибок
        ${XRAY_INIT} restart && kvas vpn set 
    else
        # В случае если есть ошибки выводим их в консоль
        echo -e "${BLUE}В файле ${VLESS_CONFIG_FILE} обнаружены следующие ошибки:${NOCL}"
        print_line
        echo -e "${RED}${check_xray_config}${NOCL}"
    fi


}

_cmd_remove_vless_proxy(){
#-------------------------------------------------------------------------------
#
#	Функция удаляет Proxy Vless пакеты и конфигурацию, 
#   чтоб привести Квас к базовому состоянию для отладки пакета
#
#-------------------------------------------------------------------------------
    # Удаляем пакет xray
    has_proxy_package_installed && {

        # Останавливаем службу xray
        ${XRAY_INIT} stop &> /dev/null

        # Удаляем пакет xray
        opkg remove xray &> /dev/null

        # Удаляем конфигурациюs
        rm -f "${VLESS_CONFIG_FILE}"

        # Удаляем конфигурацию профиля Proxy
        delete_proxy_interface

        #  Ставим пакет proxy в очередь на удаление  
        system_package_action remove proxy


    }

}


#_cmd_remove_vless_proxy
_cmd_install_proxy_package
# cmd_install_vless_proxy
# ifs=$(ip a | grep global | grep t2s_ | sed 's/.*\(t2s_.*\)/\1/g')
# curl -v -i ${ifs} ifconfig.me && echo

